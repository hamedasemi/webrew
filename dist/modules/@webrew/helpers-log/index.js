'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DEBUG = exports.ENV = undefined;
exports.debug = debug;
exports.info = info;
exports.warn = warn;
exports.error = error;

var _chalk = require('chalk');

var ENV = exports.ENV = typeof process.env.ENV !== 'undefined' ? false : process.env.ENV;
var DEBUG = exports.DEBUG = typeof process.env.DEBUG !== 'undefined';

function debug() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args = args.map(function (arg) {
        if (typeof arg === 'string' && arg.search(/:/g) > 0) return '' + (0, _chalk.dim)(arg);else return arg;
    });
    args.unshift('[' + (0, _chalk.dim)(date) + '] [' + (0, _chalk.magenta)('DEBUG') + ']');
    DEBUG && console.log.apply(console, args);
}

function info() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args = args.map(function (arg) {
        if (typeof arg === 'string' && arg.search(/:/g) > 0) return '' + (0, _chalk.dim)(arg);else return arg;
    });
    args.unshift('[' + (0, _chalk.dim)(date) + '] [' + (0, _chalk.cyan)('INFO') + ']');
    console.log.apply(console, args);
}

function warn() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args = args.map(function (arg) {
        if (typeof arg === 'string' && arg.search(/:/g) > 0) return '' + (0, _chalk.dim)(arg);else return arg;
    });
    args.unshift('[' + (0, _chalk.dim)(date) + '] [' + (0, _chalk.yellow)('WARN') + ']');
    console.log.apply(console, args);
}

function error() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args = args.map(function (arg) {
        if (typeof arg === 'string' && arg.search(/:/g) > 0) return '' + (0, _chalk.dim)(arg);else return arg;
    });
    args.unshift('[' + (0, _chalk.dim)(date) + '] [' + (0, _chalk.red)('ERROR') + ']');
    console.log.apply(console, args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL21vZHVsZXMvQHdlYnJldy9oZWxwZXJzLWxvZy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJFTlYiLCJwcm9jZXNzIiwiZW52IiwiREVCVUciLCJkYXRlIiwiRGF0ZSIsInRvVGltZVN0cmluZyIsInJlcGxhY2UiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJtYXAiLCJhcmciLCJzZWFyY2giLCJ1bnNoaWZ0IiwiY29uc29sZSIsImxvZyIsImFwcGx5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFNZ0JBLEssR0FBQUEsSztRQVdBQyxJLEdBQUFBLEk7UUFXQUMsSSxHQUFBQSxJO1FBV0FDLEssR0FBQUEsSzs7QUF2Q2hCOztBQUdPLElBQU1DLG9CQUFNLE9BQU9DLFFBQVFDLEdBQVIsQ0FBWUYsR0FBbkIsbUJBQXlDLEtBQXpDLEdBQWlEQyxRQUFRQyxHQUFSLENBQVlGLEdBQXpFO0FBQ0EsSUFBTUcsd0JBQVEsT0FBT0YsUUFBUUMsR0FBUixDQUFZQyxLQUFuQixnQkFBZDs7QUFFQSxTQUFTUCxLQUFULEdBQWlCO0FBQ3BCLFFBQUlRLE9BQU8sSUFBSUMsSUFBSixHQUFXQyxZQUFYLGFBQW9DQyxPQUFwQyxDQUE0QyxNQUE1QyxLQUFYO0FBQ0EsUUFBSUMsT0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCQyxTQUEzQixDQUFYO0FBQ0FMLFdBQU9BLEtBQUtNLEdBQUwsQ0FBUyxVQUFDQyxHQUFELEVBQVM7QUFDckIsWUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsSUFBSUMsTUFBSixDQUFXLElBQVgsSUFBbUIsQ0FBbEQsRUFBcUQsWUFBVSxnQkFBSUQsR0FBSixDQUFWLENBQXJELEtBQ0ssT0FBT0EsR0FBUDtBQUNSLEtBSE0sQ0FBUDtBQUlBUCxTQUFLUyxPQUFMLE9BQWlCLGdCQUFJYixJQUFKLENBQWpCLFdBQWdDLDRCQUFoQztBQUNBRCxhQUFTZSxRQUFRQyxHQUFSLENBQVlDLEtBQVosQ0FBa0JGLE9BQWxCLEVBQTJCVixJQUEzQixDQUFUO0FBQ0g7O0FBRU0sU0FBU1gsSUFBVCxHQUFnQjtBQUNuQixRQUFJTyxPQUFPLElBQUlDLElBQUosR0FBV0MsWUFBWCxhQUFvQ0MsT0FBcEMsQ0FBNEMsTUFBNUMsS0FBWDtBQUNBLFFBQUlDLE9BQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkMsU0FBM0IsQ0FBWDtBQUNBTCxXQUFPQSxLQUFLTSxHQUFMLENBQVMsVUFBQ0MsR0FBRCxFQUFTO0FBQ3JCLFlBQUksT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkJBLElBQUlDLE1BQUosQ0FBVyxJQUFYLElBQW1CLENBQWxELEVBQXFELFlBQVUsZ0JBQUlELEdBQUosQ0FBVixDQUFyRCxLQUNLLE9BQU9BLEdBQVA7QUFDUixLQUhNLENBQVA7QUFJQVAsU0FBS1MsT0FBTCxPQUFpQixnQkFBSWIsSUFBSixDQUFqQixXQUFnQyx3QkFBaEM7QUFDQWMsWUFBUUMsR0FBUixDQUFZQyxLQUFaLENBQWtCRixPQUFsQixFQUEyQlYsSUFBM0I7QUFDSDs7QUFFTSxTQUFTVixJQUFULEdBQWdCO0FBQ25CLFFBQUlNLE9BQU8sSUFBSUMsSUFBSixHQUFXQyxZQUFYLGFBQW9DQyxPQUFwQyxDQUE0QyxNQUE1QyxLQUFYO0FBQ0EsUUFBSUMsT0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCQyxTQUEzQixDQUFYO0FBQ0FMLFdBQU9BLEtBQUtNLEdBQUwsQ0FBUyxVQUFDQyxHQUFELEVBQVM7QUFDckIsWUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQkEsSUFBSUMsTUFBSixDQUFXLElBQVgsSUFBbUIsQ0FBbEQsRUFBcUQsWUFBVSxnQkFBSUQsR0FBSixDQUFWLENBQXJELEtBQ0ssT0FBT0EsR0FBUDtBQUNSLEtBSE0sQ0FBUDtBQUlBUCxTQUFLUyxPQUFMLE9BQWlCLGdCQUFJYixJQUFKLENBQWpCLFdBQWdDLDBCQUFoQztBQUNBYyxZQUFRQyxHQUFSLENBQVlDLEtBQVosQ0FBa0JGLE9BQWxCLEVBQTJCVixJQUEzQjtBQUNIOztBQUVNLFNBQVNULEtBQVQsR0FBaUI7QUFDcEIsUUFBSUssT0FBTyxJQUFJQyxJQUFKLEdBQVdDLFlBQVgsYUFBb0NDLE9BQXBDLENBQTRDLE1BQTVDLEtBQVg7QUFDQSxRQUFJQyxPQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLENBQVg7QUFDQUwsV0FBT0EsS0FBS00sR0FBTCxDQUFTLFVBQUNDLEdBQUQsRUFBUztBQUNyQixZQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxJQUFJQyxNQUFKLENBQVcsSUFBWCxJQUFtQixDQUFsRCxFQUFxRCxZQUFVLGdCQUFJRCxHQUFKLENBQVYsQ0FBckQsS0FDSyxPQUFPQSxHQUFQO0FBQ1IsS0FITSxDQUFQO0FBSUFQLFNBQUtTLE9BQUwsT0FBaUIsZ0JBQUliLElBQUosQ0FBakIsV0FBZ0Msd0JBQWhDO0FBQ0FjLFlBQVFDLEdBQVIsQ0FBWUMsS0FBWixDQUFrQkYsT0FBbEIsRUFBMkJWLElBQTNCO0FBQ0giLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibGFjaywgcmVkLCBncmVlbiwgeWVsbG93LCBibHVlLCBtYWdlbnRhLCBjeWFuLCB3aGl0ZSwgZ3JheSwgZGltIH0gZnJvbSAnY2hhbGsnXG5cblxuZXhwb3J0IGNvbnN0IEVOViA9IHR5cGVvZiBwcm9jZXNzLmVudi5FTlYgIT09IGB1bmRlZmluZWRgID8gZmFsc2UgOiBwcm9jZXNzLmVudi5FTlZcbmV4cG9ydCBjb25zdCBERUJVRyA9IHR5cGVvZiBwcm9jZXNzLmVudi5ERUJVRyAhPT0gYHVuZGVmaW5lZGBcblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKS50b1RpbWVTdHJpbmcoYEhIOm1tOnNzYCkucmVwbGFjZSgvXFwgLisvLCBgYClcbiAgICBsZXQgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICBhcmdzID0gYXJncy5tYXAoKGFyZykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgJiYgYXJnLnNlYXJjaCgvOi9nKSA+IDApIHJldHVybiBgJHtkaW0oYXJnKX1gXG4gICAgICAgIGVsc2UgcmV0dXJuIGFyZ1xuICAgIH0pXG4gICAgYXJncy51bnNoaWZ0KGBbJHtkaW0oZGF0ZSl9XSBbJHttYWdlbnRhKGBERUJVR2ApfV1gKVxuICAgIERFQlVHICYmIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmZvKCkge1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKS50b1RpbWVTdHJpbmcoYEhIOm1tOnNzYCkucmVwbGFjZSgvXFwgLisvLCBgYClcbiAgICBsZXQgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICBhcmdzID0gYXJncy5tYXAoKGFyZykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgJiYgYXJnLnNlYXJjaCgvOi9nKSA+IDApIHJldHVybiBgJHtkaW0oYXJnKX1gXG4gICAgICAgIGVsc2UgcmV0dXJuIGFyZ1xuICAgIH0pXG4gICAgYXJncy51bnNoaWZ0KGBbJHtkaW0oZGF0ZSl9XSBbJHtjeWFuKGBJTkZPYCl9XWApXG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZyhgSEg6bW06c3NgKS5yZXBsYWNlKC9cXCAuKy8sIGBgKVxuICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgIGFyZ3MgPSBhcmdzLm1hcCgoYXJnKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyAmJiBhcmcuc2VhcmNoKC86L2cpID4gMCkgcmV0dXJuIGAke2RpbShhcmcpfWBcbiAgICAgICAgZWxzZSByZXR1cm4gYXJnXG4gICAgfSlcbiAgICBhcmdzLnVuc2hpZnQoYFske2RpbShkYXRlKX1dIFske3llbGxvdyhgV0FSTmApfV1gKVxuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKGBISDptbTpzc2ApLnJlcGxhY2UoL1xcIC4rLywgYGApXG4gICAgbGV0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgYXJncyA9IGFyZ3MubWFwKChhcmcpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmIGFyZy5zZWFyY2goLzovZykgPiAwKSByZXR1cm4gYCR7ZGltKGFyZyl9YFxuICAgICAgICBlbHNlIHJldHVybiBhcmdcbiAgICB9KVxuICAgIGFyZ3MudW5zaGlmdChgWyR7ZGltKGRhdGUpfV0gWyR7cmVkKGBFUlJPUmApfV1gKVxuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG59Il19